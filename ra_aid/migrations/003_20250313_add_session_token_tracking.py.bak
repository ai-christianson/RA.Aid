"""Peewee migrations -- 003_20250313_add_session_token_tracking.py.

Some examples (model - class or model name)::

    > Model = migrator.orm['table_name']            # Return model in current state by name
    > Model = migrator.ModelClass                   # Return model in current state by name

    > migrator.sql(sql)                             # Run custom SQL
    > migrator.run(func, *args, **kwargs)           # Run python function with the given args
    > migrator.create_model(Model)                  # Create a model (could be used as decorator)
    > migrator.remove_model(model, cascade=True)    # Remove a model
    > migrator.add_fields(model, **fields)          # Add fields to a model
    > migrator.change_fields(model, **fields)       # Change fields
    > migrator.remove_fields(model, *field_names, cascade=True)
    > migrator.rename_field(model, old_field_name, new_field_name)
    > migrator.rename_table(model, new_table_name)
    > migrator.add_index(model, *col_names, unique=False)
    > migrator.add_not_null(model, *field_names)
    > migrator.add_default(model, field_name, default)
    > migrator.add_constraint(model, name, sql)
    > migrator.drop_index(model, *col_names)
    > migrator.drop_not_null(model, *field_names)
    > migrator.drop_constraints(model, *constraints)

"""

from contextlib import suppress

import peewee as pw
from peewee_migrate import Migrator


with suppress(ImportError):
    import playhouse.postgres_ext as pw_pext


def migrate(migrator: Migrator, database: pw.Database, *, fake=False):
    """Write your migrations here."""
    
    # Add nullable fields first
    migrator.add_fields(
        'session',
        total_input_tokens=pw.IntegerField(null=True),
        total_output_tokens=pw.IntegerField(null=True),
        total_tokens=pw.IntegerField(null=True),
        total_cost=pw.FloatField(null=True)
    )
    
    # Set default values for existing records
    migrator.sql("""
        UPDATE session SET
        total_input_tokens = COALESCE(total_input_tokens, 0),
        total_output_tokens = COALESCE(total_output_tokens, 0),
        total_tokens = COALESCE(total_tokens, 0),
        total_cost = COALESCE(total_cost, 0.0)
    """)
    
    # SQLite-specific table recreation
    if isinstance(database, pw.SqliteDatabase):
        migrator.run(lambda: database.execute_sql(
            "ALTER TABLE session RENAME TO old_session;"
            "CREATE TABLE session AS SELECT * FROM old_session;"
            "DROP TABLE old_session;"
        ))
    
    # Add NOT NULL constraints and defaults
    migrator.change_fields(
        'session',
        total_input_tokens=pw.IntegerField(default=0, null=False),
        total_output_tokens=pw.IntegerField(default=0, null=False),
        total_tokens=pw.IntegerField(default=0, null=False),
        total_cost=pw.FloatField(default=0.0, null=False)
    )


def rollback(migrator: Migrator, database: pw.Database, *, fake=False):
    """Write your rollback migrations here."""
    
    # Remove token tracking fields from Session model
    migrator.remove_fields('session', 'total_input_tokens', 'total_output_tokens', 'total_tokens', 'total_cost')
