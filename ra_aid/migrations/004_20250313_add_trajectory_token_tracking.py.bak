"""Peewee migrations -- 004_20250313_add_trajectory_token_tracking.py.

Some examples (model - class or model name)::

    > Model = migrator.orm['table_name']            # Return model in current state by name
    > Model = migrator.ModelClass                   # Return model in current state by name

    > migrator.sql(sql)                             # Run custom SQL
    > migrator.run(func, *args, **kwargs)           # Run python function with the given args
    > migrator.create_model(Model)                  # Create a model (could be used as decorator)
    > migrator.remove_model(model, cascade=True)    # Remove a model
    > migrator.add_fields(model, **fields)          # Add fields to a model
    > migrator.change_fields(model, **fields)       # Change fields
    > migrator.remove_fields(model, *field_names, cascade=True)
    > migrator.rename_field(model, old_field_name, new_field_name)
    > migrator.rename_table(model, new_table_name)
    > migrator.add_index(model, *col_names, unique=False)
    > migrator.add_not_null(model, *field_names)
    > migrator.add_default(model, field_name, default)
    > migrator.add_constraint(model, name, sql)
    > migrator.drop_index(model, *col_names)
    > migrator.drop_not_null(model, *field_names)
    > migrator.drop_constraints(model, *constraints)

"""

from contextlib import suppress

import peewee as pw
from peewee_migrate import Migrator


with suppress(ImportError):
    import playhouse.postgres_ext as pw_pext


def migrate(migrator: Migrator, database: pw.Database, *, fake=False):
    """Write your migrations here."""
    
    # Force recreate the trajectory table with all fields
    # First drop the table if it exists
    try:
        migrator.sql("DROP TABLE IF EXISTS trajectory")
    except Exception as e:
        print(f"Error dropping trajectory table: {e}")
    
    # Create the trajectory table with all required fields
    @migrator.create_model
    class Trajectory(pw.Model):
        id = pw.AutoField()
        created_at = pw.DateTimeField()
        updated_at = pw.DateTimeField()
        human_input_id = pw.IntegerField(null=True)
        tool_name = pw.TextField(null=True)
        tool_parameters = pw.TextField(null=True)
        tool_result = pw.TextField(null=True)
        step_data = pw.TextField(null=True)
        record_type = pw.TextField(null=True)
        cost = pw.FloatField(null=True)
        tokens = pw.IntegerField(null=True)
        current_cost = pw.FloatField(null=True)
        current_tokens = pw.IntegerField(null=True)
        total_cost = pw.FloatField(null=True)
        total_tokens = pw.IntegerField(null=True)
        input_tokens = pw.IntegerField(null=True)
        output_tokens = pw.IntegerField(null=True)
        is_error = pw.BooleanField(default=False)
        error_message = pw.TextField(null=True)
        error_type = pw.TextField(null=True)
        error_details = pw.TextField(null=True)
        session_id = pw.IntegerField(null=True)

        class Meta:
            table_name = "trajectory"


def rollback(migrator: Migrator, database: pw.Database, *, fake=False):
    """Write your rollback migrations here."""
    
    # Remove token tracking fields from Trajectory model
    migrator.remove_fields('trajectory', 'current_cost', 'current_tokens', 'total_cost', 'total_tokens')
